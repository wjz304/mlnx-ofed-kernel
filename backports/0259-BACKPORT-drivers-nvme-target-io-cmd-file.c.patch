From: Valentine Fatiev <valentinef@nvidia.com>
Subject: [PATCH] BACKPORT: drivers/nvme/target/io-cmd-file.c

Change-Id: I216eb77a24173ad5f3582529ab96a85b4ace4e44
---
 drivers/nvme/target/io-cmd-file.c | 47 +++++++++++++++++++++++++++++++
 1 file changed, 47 insertions(+)

--- a/drivers/nvme/target/io-cmd-file.c
+++ b/drivers/nvme/target/io-cmd-file.c
@@ -4,6 +4,7 @@
  * Copyright (c) 2017-2018 Western Digital Corporation or its
  * affiliates.
  */
+#ifdef HAVE_FS_HAS_KIOCB
 #ifdef pr_fmt
 #undef pr_fmt
 #endif
@@ -76,6 +77,15 @@ err:
 	return ret;
 }
 
+#ifndef HAVE_BVEC_SET_PAGE
+static void nvmet_file_init_bvec(struct bio_vec *bv, struct scatterlist *sg)
+{
+	bv->bv_page = sg_page(sg);
+	bv->bv_offset = sg->offset;
+	bv->bv_len = sg->length;
+}
+#endif
+
 static ssize_t nvmet_file_submit_bvec(struct nvmet_req *req, loff_t pos,
 		unsigned long nr_segs, size_t count, int ki_flags)
 {
@@ -88,22 +98,42 @@ static ssize_t nvmet_file_submit_bvec(st
 		if (req->cmd->rw.control & cpu_to_le16(NVME_RW_FUA))
 			ki_flags |= IOCB_DSYNC;
 		call_iter = req->ns->file->f_op->write_iter;
+#ifdef HAVE_ITER_DEST
 		rw = ITER_SOURCE;
+#else
+		rw = WRITE;
+#endif
 	} else {
 		call_iter = req->ns->file->f_op->read_iter;
+#ifdef HAVE_ITER_DEST
 		rw = ITER_DEST;
+#else
+		rw = READ;
+#endif
 	}
 
+#ifdef HAVE_IOV_ITER_IS_BVEC_SET
 	iov_iter_bvec(&iter, rw, req->f.bvec, nr_segs, count);
+#else
+	iov_iter_bvec(&iter, ITER_BVEC | rw, req->f.bvec, nr_segs, count);
+#endif
 
 	iocb->ki_pos = pos;
 	iocb->ki_filp = req->ns->file;
+#ifdef HAVE_FILE_F_IOCB_FLAGS
 	iocb->ki_flags = ki_flags | iocb->ki_filp->f_iocb_flags;
+#else
+	iocb->ki_flags = ki_flags | iocb_flags(req->ns->file);
+#endif
 
 	return call_iter(iocb, &iter);
 }
 
+#ifdef HAVE_FS_KIOCB_KI_COMPLETE_2_ARG
 static void nvmet_file_io_done(struct kiocb *iocb, long ret)
+#else
+static void nvmet_file_io_done(struct kiocb *iocb, long ret, long ret2)
+#endif
 {
 	struct nvmet_req *req = container_of(iocb, struct nvmet_req, f.iocb);
 	u16 status = NVME_SC_SUCCESS;
@@ -142,8 +172,12 @@ static bool nvmet_file_execute_io(struct
 
 	memset(&req->f.iocb, 0, sizeof(struct kiocb));
 	for_each_sg(req->sg, sg, req->sg_cnt, i) {
+#ifdef HAVE_BVEC_SET_PAGE
 		bvec_set_page(&req->f.bvec[bv_cnt], sg_page(sg), sg->length,
 			      sg->offset);
+#else
+		nvmet_file_init_bvec(&req->f.bvec[bv_cnt], sg);
+#endif
 		len += req->f.bvec[bv_cnt].bv_len;
 		total_len += req->f.bvec[bv_cnt].bv_len;
 		bv_cnt++;
@@ -177,7 +211,9 @@ static bool nvmet_file_execute_io(struct
 	 * A NULL ki_complete ask for synchronous execution, which we want
 	 * for the IOCB_NOWAIT case.
 	 */
+#ifdef HAVE_IOCB_NOWAIT
 	if (!(ki_flags & IOCB_NOWAIT))
+#endif
 		req->f.iocb.ki_complete = nvmet_file_io_done;
 
 	ret = nvmet_file_submit_bvec(req, pos, bv_cnt, total_len, ki_flags);
@@ -185,6 +221,7 @@ static bool nvmet_file_execute_io(struct
 	switch (ret) {
 	case -EIOCBQUEUED:
 		return true;
+#ifdef HAVE_IOCB_NOWAIT
 	case -EAGAIN:
 		if (WARN_ON_ONCE(!(ki_flags & IOCB_NOWAIT)))
 			goto complete;
@@ -198,10 +235,15 @@ static bool nvmet_file_execute_io(struct
 		if ((ki_flags & IOCB_NOWAIT))
 			return false;
 		break;
+#endif
 	}
 
 complete:
+#ifdef HAVE_FS_KIOCB_KI_COMPLETE_2_ARG
 	nvmet_file_io_done(&req->f.iocb, ret);
+#else
+	nvmet_file_io_done(&req->f.iocb, ret, 0);
+#endif
 	return true;
 }
 
@@ -244,10 +286,14 @@ static void nvmet_file_execute_rw(struct
 		req->f.mpool_alloc = false;
 
 	if (req->ns->buffered_io) {
+#ifdef HAVE_IOCB_NOWAIT
 		if (likely(!req->f.mpool_alloc) &&
+#ifdef HAVE_FMODE_NOWAIT
 		    (req->ns->file->f_mode & FMODE_NOWAIT) &&
+#endif
 		    nvmet_file_execute_io(req, IOCB_NOWAIT))
 			return;
+#endif
 		nvmet_file_submit_buffered_io(req);
 	} else
 		nvmet_file_execute_io(req, 0);
@@ -383,3 +429,4 @@ u16 nvmet_file_parse_io_cmd(struct nvmet
 		return nvmet_report_invalid_opcode(req);
 	}
 }
+#endif /* HAVE_FS_HAS_KIOCB */
