From: Valentine Fatiev <valentinef@nvidia.com>
Subject: [PATCH] BACKPORT: drivers/nvme/target/fc.c

Change-Id: I6c8c40065bde5902ed1d2525d5435c5826672322
---
 drivers/nvme/target/fc.c | 79 ++++++++++++++++++++++++++++++++++++++++
 1 file changed, 79 insertions(+)

--- a/drivers/nvme/target/fc.c
+++ b/drivers/nvme/target/fc.c
@@ -2,6 +2,8 @@
 /*
  * Copyright (c) 2016 Avago Technologies.  All rights reserved.
  */
+#ifdef HAVE_LINUX_NVME_FC_DRIVER_H
+
 #ifdef pr_fmt
 #undef pr_fmt
 #endif
@@ -1118,7 +1120,11 @@ nvmet_fc_alloc_target_assoc(struct nvmet
 	if (!assoc)
 		return NULL;
 
+#ifdef HAVE_IDA_ALLOC
 	idx = ida_alloc(&tgtport->assoc_cnt, GFP_KERNEL);
+#else
+	idx = ida_simple_get(&tgtport->assoc_cnt, 0, 0, GFP_KERNEL);
+#endif
 	if (idx < 0)
 		goto out_free_assoc;
 
@@ -1160,7 +1166,11 @@ nvmet_fc_alloc_target_assoc(struct nvmet
 out_put:
 	nvmet_fc_tgtport_put(tgtport);
 out_ida:
+#ifdef HAVE_IDA_FREE
 	ida_free(&tgtport->assoc_cnt, idx);
+#else
+	ida_simple_remove(&tgtport->assoc_cnt, idx);
+#endif
 out_free_assoc:
 	kfree(assoc);
 	return NULL;
@@ -1186,7 +1196,11 @@ nvmet_fc_target_assoc_free(struct kref *
 	/* if pending Rcv Disconnect Association LS, send rsp now */
 	if (oldls)
 		nvmet_fc_xmt_ls_rsp(tgtport, oldls);
+#ifdef HAVE_IDA_FREE
 	ida_free(&tgtport->assoc_cnt, assoc->a_id);
+#else
+	ida_simple_remove(&tgtport->assoc_cnt, assoc->a_id);
+#endif
 	dev_info(tgtport->dev,
 		"{%d:%d} Association freed\n",
 		tgtport->fc_target_port.port_num, assoc->a_id);
@@ -1386,7 +1400,11 @@ nvmet_fc_register_targetport(struct nvme
 		goto out_regtgt_failed;
 	}
 
+#ifdef HAVE_IDA_ALLOC
 	idx = ida_alloc(&nvmet_fc_tgtport_cnt, GFP_KERNEL);
+#else
+	idx = ida_simple_get(&nvmet_fc_tgtport_cnt, 0, 0, GFP_KERNEL);
+#endif
 	if (idx < 0) {
 		ret = -ENOSPC;
 		goto out_fail_kfree;
@@ -1436,7 +1454,11 @@ nvmet_fc_register_targetport(struct nvme
 out_free_newrec:
 	put_device(dev);
 out_ida_put:
+#ifdef HAVE_IDA_FREE
 	ida_free(&nvmet_fc_tgtport_cnt, idx);
+#else
+	ida_simple_remove(&nvmet_fc_tgtport_cnt, idx);
+#endif
 out_fail_kfree:
 	kfree(newrec);
 out_regtgt_failed:
@@ -1463,7 +1485,11 @@ nvmet_fc_free_tgtport(struct kref *ref)
 	/* let the LLDD know we've finished tearing it down */
 	tgtport->ops->targetport_delete(&tgtport->fc_target_port);
 
+#ifdef HAVE_IDA_FREE
 	ida_free(&nvmet_fc_tgtport_cnt,
+#else
+	ida_simple_remove(&nvmet_fc_tgtport_cnt,
+#endif
 			tgtport->fc_target_port.port_num);
 
 	ida_destroy(&tgtport->assoc_cnt);
@@ -2083,11 +2109,37 @@ nvmet_fc_alloc_tgt_pgs(struct nvmet_fc_f
 {
 	struct scatterlist *sg;
 	unsigned int nent;
+#ifndef HAVE_SGL_ALLOC
+	struct page *page;
+	u32 page_len, length;
+	int i = 0;
+
+	length = fod->req.transfer_len;
+	nent = DIV_ROUND_UP(length, PAGE_SIZE);
+	sg = kmalloc_array(nent, sizeof(struct scatterlist), GFP_KERNEL);
+#else
 
 	sg = sgl_alloc(fod->req.transfer_len, GFP_KERNEL, &nent);
+#endif
 	if (!sg)
 		goto out;
 
+#ifndef HAVE_SGL_ALLOC
+	sg_init_table(sg, nent);
+
+	while (length) {
+		page_len = min_t(u32, length, PAGE_SIZE);
+
+		page = alloc_page(GFP_KERNEL);
+		if (!page)
+			goto out_free_pages;
+
+		sg_set_page(&sg[i], page, page_len, 0);
+		length -= page_len;
+		i++;
+	}
+
+#endif
 	fod->data_sg = sg;
 	fod->data_sg_cnt = nent;
 	fod->data_sg_cnt = fc_dma_map_sg(fod->tgtport->dev, sg, nent,
@@ -2098,6 +2150,17 @@ nvmet_fc_alloc_tgt_pgs(struct nvmet_fc_f
 
 	return 0;
 
+#ifndef HAVE_SGL_ALLOC
+out_free_pages:
+	while (i > 0) {
+		i--;
+		__free_page(sg_page(&sg[i]));
+	}
+
+	kfree(sg);
+	fod->data_sg = NULL;
+	fod->data_sg_cnt = 0;
+#endif
 out:
 	return NVME_SC_INTERNAL;
 }
@@ -2105,13 +2168,24 @@ out:
 static void
 nvmet_fc_free_tgt_pgs(struct nvmet_fc_fcp_iod *fod)
 {
+#ifndef HAVE_SGL_FREE
+	struct scatterlist *sg;
+	int count;
+
+#endif
 	if (!fod->data_sg || !fod->data_sg_cnt)
 		return;
 
 	fc_dma_unmap_sg(fod->tgtport->dev, fod->data_sg, fod->data_sg_cnt,
 				((fod->io_dir == NVMET_FCP_WRITE) ?
 					DMA_FROM_DEVICE : DMA_TO_DEVICE));
+#ifdef HAVE_SGL_FREE
 	sgl_free(fod->data_sg);
+#else
+	for_each_sg(fod->data_sg, sg, fod->data_sg_cnt, count)
+	__free_page(sg_page(sg));
+	kfree(fod->data_sg);
+#endif
 	fod->data_sg = NULL;
 	fod->data_sg_cnt = 0;
 }
@@ -2948,3 +3022,8 @@ module_init(nvmet_fc_init_module);
 module_exit(nvmet_fc_exit_module);
 
 MODULE_LICENSE("GPL v2");
+#ifdef RETPOLINE_MLNX
+MODULE_INFO(retpoline, "Y");
+#endif
+
+#endif /* HAVE_LINUX_NVME_FC_DRIVER_H */
