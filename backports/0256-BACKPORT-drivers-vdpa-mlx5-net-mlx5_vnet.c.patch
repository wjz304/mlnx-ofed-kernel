From: Valentine Fatiev <valentinef@nvidia.com>
Subject: [PATCH] BACKPORT: drivers/vdpa/mlx5/net/mlx5_vnet.c

Change-Id: Ib52c035a64f6d4b81bec3d69f3306b7a718d3199
---
 drivers/vdpa/mlx5/net/mlx5_vnet.c | 22 +++++++++++++---------
 1 file changed, 13 insertions(+), 9 deletions(-)

--- a/drivers/vdpa/mlx5/net/mlx5_vnet.c
+++ b/drivers/vdpa/mlx5/net/mlx5_vnet.c
@@ -1,6 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB
 /* Copyright (c) 2020 Mellanox Technologies Ltd. */
 
+#ifdef HAVE_VDPA_SUPPORT
 #include <linux/module.h>
 #include <linux/vdpa.h>
 #include <linux/vringh.h>
@@ -20,10 +21,6 @@
 #include "mlx5_vdpa.h"
 #include "mlx5_vnet.h"
 
-MODULE_AUTHOR("Eli Cohen <eli@mellanox.com>");
-MODULE_DESCRIPTION("Mellanox VDPA driver");
-MODULE_LICENSE("Dual BSD/GPL");
-
 #define VALID_FEATURES_MASK                                                                        \
 	(BIT_ULL(VIRTIO_NET_F_CSUM) | BIT_ULL(VIRTIO_NET_F_GUEST_CSUM) |                                   \
 	 BIT_ULL(VIRTIO_NET_F_CTRL_GUEST_OFFLOADS) | BIT_ULL(VIRTIO_NET_F_MTU) | BIT_ULL(VIRTIO_NET_F_MAC) |   \
@@ -851,8 +848,7 @@ static bool counters_supported(const str
 static bool msix_mode_supported(struct mlx5_vdpa_dev *mvdev)
 {
 	return MLX5_CAP_DEV_VDPA_EMULATION(mvdev->mdev, event_mode) &
-		(1 << MLX5_VIRTIO_Q_EVENT_MODE_MSIX_MODE) &&
-		pci_msix_can_alloc_dyn(mvdev->mdev->pdev);
+		(1 << MLX5_VIRTIO_Q_EVENT_MODE_MSIX_MODE);
 }
 
 static int create_virtqueue(struct mlx5_vdpa_net *ndev, struct mlx5_vdpa_virtqueue *mvq)
@@ -2957,6 +2953,7 @@ static int mlx5_vdpa_set_map(struct vdpa
 	return err;
 }
 
+#ifdef HAVE_VDPA_CONFIG_OPS_GET_VQ_DMA_DEV
 static struct device *mlx5_get_vq_dma_dev(struct vdpa_device *vdev, u16 idx)
 {
 	struct mlx5_vdpa_dev *mvdev = to_mvdev(vdev);
@@ -2966,6 +2963,7 @@ static struct device *mlx5_get_vq_dma_de
 
 	return mvdev->vdev.dma_dev;
 }
+#endif
 
 static void free_irqs(struct mlx5_vdpa_net *ndev)
 {
@@ -2980,8 +2978,6 @@ static void free_irqs(struct mlx5_vdpa_n
 
 	for (i = ndev->irqp.num_ent - 1; i >= 0; i--) {
 		ent = ndev->irqp.entries + i;
-		if (ent->map.virq)
-			pci_msix_free_irq(ndev->mvdev.mdev->pdev, ent->map);
 	}
 	kfree(ndev->irqp.entries);
 }
@@ -3217,7 +3213,9 @@ static const struct vdpa_config_ops mlx5
 	.get_generation = mlx5_vdpa_get_generation,
 	.set_map = mlx5_vdpa_set_map,
 	.set_group_asid = mlx5_set_group_asid,
+#ifdef HAVE_VDPA_CONFIG_OPS_GET_VQ_DMA_DEV
 	.get_vq_dma_dev = mlx5_get_vq_dma_dev,
+#endif
 	.free = mlx5_vdpa_free,
 	.suspend = mlx5_vdpa_suspend,
 };
@@ -3343,7 +3341,6 @@ static void allocate_irqs(struct mlx5_vd
 		ent = ndev->irqp.entries + i;
 		snprintf(ent->name, MLX5_VDPA_IRQ_NAME_LEN, "%s-vq-%d",
 			 dev_name(&ndev->mvdev.vdev.dev), i);
-		ent->map = pci_msix_alloc_irq_at(ndev->mvdev.mdev->pdev, MSI_ANY_INDEX, NULL);
 		if (!ent->map.virq)
 			return;
 
@@ -3623,3 +3620,10 @@ static struct auxiliary_driver mlx5v_dri
 };
 
 module_auxiliary_driver(mlx5v_driver);
+#endif /* HAVE_VDPA_SUPPORT */
+
+MODULE_AUTHOR("Eli Cohen <eli@mellanox.com>");
+MODULE_DESCRIPTION("Mellanox VDPA driver");
+MODULE_LICENSE("Dual BSD/GPL");
+
+
